№1.1
class LittleBell:
    def sound(self):
        print("ding")
bell = LittleBell()
bell.sound()

№1.2
class Button:
    def __init__(self):
        self.clicks = 0

    def click(self):
        self.clicks += 1

    def click_count(self):
        return self.clicks

button1 = Button()

button1.click()
button1.click()
button1.click()
print(button1.click_count())

№1.3
class Balance:
    def __init__(self):
        self.left_weight = 0
        self.right_weight = 0

    def add_left(self, weight):
        self.left_weight += weight

    def add_right(self, weight):
        self.right_weight += weight

    def result(self):
        if self.right_weight == self.left_weight:
            return "="
        elif self.right_weight > self.left_weight:
            return "R"
        else:
            return "L"
balance = Balance()
balance.add_right(10)
balance.add_left(9)
balance.add_left(2)
print(balance.result())

№1.4
class oddevenseparator:
    def __init__(self):
        self.numbers = []

    def add_number(self, number):
        self.numbers.append(number)

    def even(self):
        return [num for num in self.numbers if num % 2 == 0]

    def odd(self):
        return [num for num in self.numbers if num % 2 != 0]

separator = oddevenseparator()
separator.add_number(1)
separator.add_number(5)
separator.add_number(6)
separator.add_number(8)
separator.add_number(3)
print(' '.join(map(str, separator.even())))
print(' '.join(map(str, separator.odd())))

№1.5
class BigBell:
    def __init__(self):
        self.times = 0
    def sound(self):
        if self.times % 2 == 0:
            print("ding")
        else:
            print("dong")
        self.times += 1
        
bell = BigBell()
bell.sound()
bell.sound()
bell.sound()

№1.6
class MinMaxWordFinder:
    def __init__(self):
        self.short_words = []
        self.long_words = []
        self.min_len = 1000
        self.max_len = 0
        self.words = []

    def add_sentence(self, text):
        text = text.lower()
        first_version_words = text.split()
        for word in first_version_words:
            word = str(word).strip(".,/&?")  # убирает знаки припинания
            self.words.append(word)
        print(self.words)

    def shortest_words(self):
        self.min_len = min(len(word) for word in self.words)
        for word in self.words:
            if len(word) == self.min_len:
                self.short_words.append(word)
        self.short_words.sort()
        print(self.short_words)

        return (self.short_words)

    def longest_words(self):
        self.max_len = max(len(word) for word in self.words)
        for word in self.words:
            if (len(word) == self.max_len) and (word not in self.long_words):
                self.long_words.append(word)
        self.long_words.sort()

        return (self.long_words)

finder = MinMaxWordFinder()
finder.add_sentence('hello')
finder.add_sentence('  abc     def    ')
finder.add_sentence('world')
finder.add_sentence('            abc          ')
finder.add_sentence('asdf')
finder.add_sentence('qwert')
print(' '.join(finder.shortest_words()))
print(' '.join(finder.longest_words()))

№1.7
class boundingrectangle:
    def __init__(self):
        self.min_x = float('inf')
        self.max_x = float('-inf')
        self.min_y = float('inf')
        self.max_y = float('-inf')

    def add_point(self, x, y):
        self.min_x = min(self.min_x, x)
        self.max_x = max(self.max_x, x)
        self.min_y = min(self.min_y, y)
        self.max_y = max(self.max_y, y)

    def width(self):
        return self.max_x - self.min_x

    def height(self):
        return self.max_y - self.min_y

    def bottom_y(self):
        return self.min_y

    def top_y(self):
        return self.max_y

    def left_x(self):
        return self.min_x

    def right_x(self):
        return self.max_x

rect = boundingrectangle()
rect.add_point(-1, -2)
rect.add_point(3, 4)
print(rect.left_x(), rect.right_x())
print(rect.bottom_y(), rect.top_y())
print(rect.width(), rect.height())
